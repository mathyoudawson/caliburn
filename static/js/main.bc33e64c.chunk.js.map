{"version":3,"sources":["Charger.js","App.js","serviceWorker.js","index.js"],"names":["Charger","props","state","inserted","charger","document","querySelector","port","addEventListener","insertCharger","chargerNode","portNode","this","classList","add","remove","handleChargingOnChange","setState","id","className","React","Component","Pod","Switch","vapeOn","node","handleVapeOnChange","vapeInUse","useVape","battery","vapeDead","i","Promise","r","setTimeout","switchElement","lightElement","vapeOff","Device","Vape","juice","charging","bind","handleCharging","vapeIsUnusable","vapeIsChargable","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc33e64c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Charger extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inserted: false,\n    };\n  }\n\n  componentDidMount(){\n    let charger = document.querySelector(\"#charger\");\n    let port = document.querySelector(\"#chargingPort\");\n    charger.addEventListener(\"click\",  () => { this.insertCharger(charger, port); });\n  }\n\n  insertCharger(chargerNode, portNode){\n    if (this.state.inserted) {\n      chargerNode.classList.add(\"charger\"); \n      portNode.classList.add(\"chargingPort\"); \n      portNode.classList.remove(\"chargingPortInserted\"); \n    }\n    else {\n      chargerNode.classList.remove(\"charger\"); \n      portNode.classList.remove(\"chargingPort\"); \n      portNode.classList.add(\"chargingPortInserted\"); \n    }\n\n    this.props.handleChargingOnChange(!this.state.inserted);\n    this.setState({inserted: !this.state.inserted});\n  }\n\n  render(){\n    return(\n      <div id=\"charger\" className=\"flexCol charger\">\n        <div id=\"chargingPort\" className=\"chargingPort\"></div>\n        <div className=\"chargingPortCover\"></div>\n        <div className=\"chargingCable\">\n        </div>\n      </div>\n    );\n  }\n}\nexport default Charger;\n","import React from 'react';\nimport './App.css';\nimport Charger from './Charger';\n\nclass Pod extends React.Component {\n  render(){\n    return(\n      <div className=\"pod\">\n      </div>\n    );\n  }\n}\n\nclass Switch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vapeOn: false,\n    };\n  }\n\n  vapeOn(node){\n    // the decrement logic and figuring out when vape is dead should live in vape or device\n    this.props.handleVapeOnChange(true);\n\n    this.vapeInUse(node);\n    this.props.useVape();\n  }\n\n  async vapeInUse(node){\n    let battery = this.props.battery;\n    if(battery > 50) {\n      node.classList.add(\"vapeHighBattery\");\n      // await new Promise(r => setTimeout(r, 300));\n      // node.classList.remove(\"vapeHighBattery\");\n    }\n    else if (battery > 20) {\n      node.classList.add(\"vapeMidBattery\");\n      // await new Promise(r => setTimeout(r, 300));\n      // node.classList.remove(\"vapeMidBattery\");\n    }\n    else if (battery > 0) {\n      node.classList.add(\"vapeLowBattery\");\n      // await new Promise(r => setTimeout(r, 300));\n      // node.classList.remove(\"vapeLowBattery\");\n    }\n    else {\n      this.vapeDead(node);\n    }\n  }\n\n  async vapeDead(node){\n\n    for (let i = 0; i < 5; i++) {\n      node.classList.add(\"vapeLowBattery\");\n      await new Promise(r => setTimeout(r, 200));\n      node.classList.remove(\"vapeLowBattery\");\n      await new Promise(r => setTimeout(r, 200));\n    }\n  }\n\n  vapeOff(node){\n    this.props.handleVapeOnChange(false);\n    // let switchElement = document.querySelector(\"#switch\");\n    // switchElement.classList.add(\"vapeInUse\");\n    node.classList.remove(\"vapeHighBattery\");\n    node.classList.remove(\"vapeMidBattery\");\n    node.classList.remove(\"vapeLowBattery\");\n  }\n\n  componentDidMount(){\n    let switchElement = document.querySelector(\"#switch\");\n    let lightElement = document.querySelector(\".light\");\n    switchElement.addEventListener(\"mousedown\",  () => { this.vapeOn(lightElement); });\n    switchElement.addEventListener(\"mouseup\",  () => { this.vapeOff(lightElement); });\n  }\n\n  render(){\n    return(\n      <div className=\"flexCol\">\n        <div id=\"switch\" className=\"switch\"></div>\n        <div className=\"light\"></div>\n      </div>\n    );\n  }\n}\n\nclass Device extends React.Component {\n  render(){\n    return(\n      <div className=\"device\">\n        <Switch useVape={this.props.useVape}\n                battery={this.props.battery}\n                handleVapeOnChange={this.props.handleVapeOnChange}\n        />\n        <div className=\"deviceText flexCol\">\n          <p>\n            C<br />\n            A<br />\n            L<br />\n            I<br />\n            B<br />\n            U<br />\n            R<br />\n            N<br />\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Vape extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      battery: 100,\n      juice: 100,\n      charging: false,\n    };\n    this.useVape = this.useVape.bind(this);\n    this.handleVapeOnChange = this.handleVapeOnChange.bind(this);\n    this.handleChargingOnChange = this.handleChargingOnChange.bind(this);\n    this.handleCharging = this.handleCharging.bind(this);\n  }\n\n  // this method needs to query the state of the vape every second. You can hold done the button and light wont change colour.\n  useVape(){\n    if (this.vapeIsUnusable()) { return };\n\n    this.setState({battery: this.state.battery - 1, juice: this.state.juice - 0.5});\n\n    setTimeout(this.useVape, 1000);\n  }\n\n  vapeIsUnusable(){\n    // might want to do something special when juice is 0, eg. black smoke if vapor is implemented\n    return (this.state.vapeOn === false || this.state.battery <= 0 || this.state.juice <= 0)\n  }\n\n  handleVapeOnChange(state){\n    this.setState({vapeOn: state});\n  }\n\n  handleChargingOnChange(charging) {\n    this.setState({charging: charging});\n    if (this.state.charging) {\n      this.handleCharging();\n    }\n  }\n\n  handleCharging() {\n    if(this.vapeIsChargable()) { return };\n\n    this.setState({battery: this.state.battery + 1});\n\n    setTimeout(this.handleCharging, 3000);\n  }\n\n  vapeIsChargable(){\n    return (this.state.charging === false || this.state.battery >= 100)\n  }\n\n  render(){\n    return(\n      <div>\n        <div className=\"information\">\n          <h2><strong>Battery: </strong>{this.state.battery}</h2>\n          <h2><strong>Juice: </strong>{this.state.juice}</h2>\n        </div>\n        <div className=\"vape\">\n          <div>\n            <Pod />\n            <Device useVape={this.useVape}\n                    battery={this.state.battery}\n                    handleVapeOnChange={this.handleVapeOnChange}\n            />\n          </div>\n        </div>\n        <Charger handleChargingOnChange={this.handleChargingOnChange}/>\n      </div>\n    );\n  }\n}\n\nexport default Vape;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Vape from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Vape />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}